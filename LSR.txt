1.Without Dijkstra's
import java.util.*;

public class LinkStateRoutingSimulation {
    private static final int NUM_NODES = 5;
    private static final int INFINITY = Integer.MAX_VALUE;
    
    private int[][] adjacencyMatrix;
    private int[] costs;
    private boolean[] visited;
    
    public LinkStateRoutingSimulation() {
        adjacencyMatrix = new int[NUM_NODES][NUM_NODES];
        costs = new int[NUM_NODES];
        visited = new boolean[NUM_NODES];
    }
    
    public void addLink(int source, int destination, int cost) {
        adjacencyMatrix[source][destination] = cost;
        adjacencyMatrix[destination][source] = cost;
    }
    
    public List<Integer> findShortestPath(int source, int destination) {
        Arrays.fill(costs, INFINITY);
        Arrays.fill(visited, false);
        
        costs[source] = 0;
        
        for (int i = 0; i < NUM_NODES; i++) {
            int currentNode = getNextNode();
            visited[currentNode] = true;
            
            for (int j = 0; j < NUM_NODES; j++) {
                if (!visited[j] && adjacencyMatrix[currentNode][j] != 0) {
                    int newCost = costs[currentNode] + adjacencyMatrix[currentNode][j];
                    
                    if (newCost < costs[j]) {
                        costs[j] = newCost;
                    }
                }
            }
        }
        
        return buildPath(source, destination);
    }
    
    private int getNextNode() {
        int minCost = INFINITY;
        int nextNode = -1;
        
        for (int i = 0; i < NUM_NODES; i++) {
            if (!visited[i] && costs[i] < minCost) {
                minCost = costs[i];
                nextNode = i;
            }
        }
        
        return nextNode;
    }
    
    private List<Integer> buildPath(int source, int destination) {
        List<Integer> path = new ArrayList<>();
        int current = destination;
        
        while (current != source) {
            path.add(current);
            
            for (int i = 0; i < NUM_NODES; i++) {
                if (adjacencyMatrix[current][i] != 0 && costs[current] - adjacencyMatrix[current][i] == costs[i]) {
                    current = i;
                    break;
                }
            }
        }
        
        path.add(source);
        Collections.reverse(path);
        
        return path;
    }
    
    public static void main(String[] args) {
        LinkStateRoutingSimulation router = new LinkStateRoutingSimulation();
        
        router.addLink(0, 1, 2);
        router.addLink(0, 2, 5);
        router.addLink(1, 3, 1);
        router.addLink(2, 3, 3);
        router.addLink(2, 4, 7);
        router.addLink(3, 4, 2);
        
        int source = 0;
        int destination = 4;
        
        List<Integer> path = router.findShortestPath(source, destination);
        
        if (path.isEmpty()) {
            System.out.println("No path found from node " + source + " to node " + destination);
        } else {
            System.out.println("Shortest path from node " + source + " to node " + destination + ":");
            for (int node : path) {
                System.out.print(node + " ");
            }
        }
    }
}
We have a network with 5 nodes, and we add the links between the nodes with their respective costs using the addLink() method. 
The findShortestPath() method calculates the shortest path between a given source and destination using a basic implementation of Dijkstra's algorithm. 
Finally, in the main() method, we demonstrate how to use the LinkStateRoutingSimulation class to find the shortest path between two nodes and print the result.

2. With Dijkstra's
import java.util.Arrays;

public class LinkStateRouting {

    private static final int MAX_VALUE = Integer.MAX_VALUE;

    private int numVertices;
    private int[][] graph;

    public LinkStateRouting(int numVertices) {
        this.numVertices = numVertices;
        this.graph = new int[numVertices][numVertices];
    }

    public void addEdge(int u, int v, int weight) {
        graph[u][v] = weight;
        graph[v][u] = weight;
    }

    public void dijkstra(int src) {
        boolean[] visited = new boolean[numVertices];
        int[] dist = new int[numVertices];
        Arrays.fill(dist, MAX_VALUE);

        dist[src] = 0;

        for (int i = 0; i < numVertices - 1; i++) {
            int u = minDistance(dist, visited);
            visited[u] = true;

            for (int v = 0; v < numVertices; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] != MAX_VALUE
                        && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }

        printSolution(dist);
    }

    private int minDistance(int[] dist, boolean[] visited) {
        int minDist = MAX_VALUE;
        int minIndex = -1;

        for (int v = 0; v < numVertices; v++) {
            if (!visited[v] && dist[v] < minDist) {
                minDist = dist[v];
                minIndex = v;
            }
        }

        return minIndex;
    }

    private void printSolution(int[] dist) {
        System.out.println("Vertex \t Distance from Source");
        for (int i = 0; i < numVertices; i++) {
            System.out.println(i + "\t\t" + dist[i]);
        }
    }

    public static void main(String[] args) {
        LinkStateRouting router = new LinkStateRouting(6);

        router.addEdge(0, 1, 2);
        router.addEdge(1, 2, 5);
        router.addEdge(1, 3, 1);
        router.addEdge(2, 4, 3);
        router.addEdge(3, 4, 2);
        router.addEdge(3, 5, 5);
        router.addEdge(4, 5, 1);

        router.dijkstra(0);
    }
}
In this program, you can add edges to the graph using the addEdge method. The dijkstra method calculates the shortest 
path distances from the source vertex to all other vertices using Dijkstra's algorithm. Finally, the printSolution 
method prints the distances from the source vertex to all other vertices.

In the main method, an example graph is created and the dijkstra method is called with a source vertex of 0. 
You can modify the graph and the source vertex according to your needs.












